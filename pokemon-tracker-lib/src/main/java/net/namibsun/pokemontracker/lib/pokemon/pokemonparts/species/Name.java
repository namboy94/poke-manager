/*
This file is part of pokemon-tracker.

    pokemon-tracker is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    pokemon-tracker is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with pokemon-tracker.  If not, see <http://www.gnu.org/licenses/>.
*/

package net.namibsun.pokemontracker.lib.pokemon.pokemonparts.species;

import java.util.HashMap;
import net.namibsun.pokemontracker.lib.pokemon.enums.species.Languages;
import net.namibsun.pokemontracker.lib.webscraping.PokemonScraper;

/**
 * Class that models a Pokemon Name. This is done internally by storing the name in different languages
 * in a hashmap, with the languages being keys.
 * It is possible to use a web parser to get all available languages, but an offline version does exist as
 * well, but the language has to be specified manually.
 * Or a already existing Hashmap may be used.
 */
public class Name {

    /**
     * The Hashmap that stores the actual names of the Pokemon, with the language
     * of the name acting as a key. The languages generated by the Web parser
     * or the multi-language constructor will be stored as non-capitalized strings.
     */
    private HashMap<String, String> names = new HashMap<>();

    /**
     * Creates a new Name object by manually passing a single name and language to use as key
     * @param name:    The name of the Pokemon in the specified language
     * @param language The language to be used as a key for the Hashmap
     */
    public Name(String name, String language) {
        this.names.put(language, name);
    }

    /**
     * Overrides the local name/language hashmap with a different Hashmap
     * @param names: The Hashmap to use to override the local Hashmap
     */
    public Name(HashMap<String, String> names){
        this.names = names;
    }

    /**
     * Sets the standard names available for Pokemon, that are currently available.
     * @param english:  The name in English
     * @param french:   The name in French
     * @param german:   The name in German
     * @param japanese: The name in Japanese
     * @param korean:   The name in Korean
     */
    public Name(String english, String french, String german, String japanese, String korean) {

        this.names.put(Languages.ENGLISH.name().toLowerCase(), english);
        this.names.put(Languages.FRENCH.name().toLowerCase(), french);
        this.names.put(Languages.GERMAN.name().toLowerCase(), german);
        this.names.put(Languages.JAPANESE.name().toLowerCase(), japanese);
        this.names.put(Languages.KOREAN.name().toLowerCase(), korean);

    }

    /**
     * Returns the name of the Pokemon in the spcified language
     * @param language: The language to use as a key
     * @return          The Pokemon's name in the specified language. If the name could not be found,
     *                  the name 'Missingno.' is returned, as a reference to the infamous glitch Pokemon
     *                  from Gen I (Red/Blue/Green)
     */
    public String getName(String language) {
        String name = this.names.get(language);
        if (name == null) {
            name = "Missingno."; // A little joke
        }
        return name;

    }

    /**
     * Returns the name of the Pokemon in the specified language, but using an enum as parameter instead
     * of a String to minimize error sources
     * @param language: The language to use
     * @return          The name of the Pokemon in that language, or 'Missingno.' if the language does not exist,
     *                  (Which should not happen using enums.)
     */
    public String getName(Languages language) {
        return this.getName(language.name().toLowerCase());
    }

    /**
     * Creates a new Pokemon name from the Web page of that Pokemon, using a previously initialized parser
     * @param parser: The Web Parser to use to get the name
     * @return        The generated Name
     */
    public static Name fromWebParser(PokemonScraper parser) {
        return new Name(parser.parsePokemonName());
    }

    /**
     * Compares two Name objects
     * @param otherName: The other Name object
     * @return           true if equal, false otherwise
     */
    public boolean equals(Name otherName) {

        boolean equal = true;

        for (String key: this.names.keySet()) {
            equal = equal && this.getName(key).equals(otherName.getName(key));
        }
        return equal;
    }

}
