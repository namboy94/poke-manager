/*
This file is part of pokemon-tracker.

    pokemon-tracker is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    pokemon-tracker is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with pokemon-tracker.  If not, see <http://www.gnu.org/licenses/>.
*/

package net.namibsun.pokemontracker.lib.pokemon.pokemonparts.individual;

import net.namibsun.pokemontracker.lib.pokemon.enums.Natures;
import net.namibsun.pokemontracker.lib.pokemon.enums.PokemonStatTypes;

/**
 * Class that models the nature of a Pokemon
 */
public class Nature {

    /**
     * The specific Nature of the Pokemon
     */
    private Natures nature;

    /**
     * A matrix that shows which natures are beneficial for which stat type
     * Inspired by http://pokemondb.net/mechanics/natures
     * The x-axis shows the boosted stats
     * The y-axis shows the dropped stats
     * The order of the stats is defined by the indexMap
     */
    private Natures[][] natureMatrix = new Natures[][] {
            new Natures[]{ Natures.HARDY, Natures.LONELY, Natures.ADAMANT, Natures.NAUGHTY, Natures.BRAVE },
            new Natures[]{ Natures.BOLD, Natures.DOCILE, Natures.IMPISH, Natures.LAX, Natures.RELAXED },
            new Natures[]{ Natures.MODEST, Natures.MILD, Natures.BASHFUL, Natures.RASH, Natures.QUIET },
            new Natures[]{ Natures.CALM, Natures.GENTLE, Natures.CAREFUL, Natures.QUIRKY, Natures.SASSY},
            new Natures[]{ Natures.TIMID, Natures.HASTY, Natures.JOLLY, Natures.NAIVE, Natures.SERIOUS}
    };

    /**
     * The order in which the stats are applied to the natureMatrix
     */
    private PokemonStatTypes[] indexMap = new PokemonStatTypes[] {
            PokemonStatTypes.ATK,
            PokemonStatTypes.DEF,
            PokemonStatTypes.SATK,
            PokemonStatTypes.SDEF,
            PokemonStatTypes.SPD
    };

    /**
     * The indices of the specific nature in the nature matrix.
     * Generated by getNatureMatrixIndices()
     */
    private int[] natureMatrixIndices;

    /**
     * Creates a new Nature object.
     * Sets the nature and determines the indices of the nature in the nature matrix.
     * @param nature: The nature of the Pokemon
     */
    public Nature(Natures nature) {
        this.nature = nature;
        this.natureMatrixIndices = this.getNatureMatrixIndices();
    }

    /**
     * Finds the indices of the nature in the nature matrix by simply iterating
     * over the entire matrix and checking which nature is the same as the currently
     * set nature.
     * @return The indices if the nature in the matrix, {row, column}
     */
    private int[] getNatureMatrixIndices() {

        int rowIndex = 0;
        int columnIndex = 0;

        for (int i = 0; i < this.natureMatrix.length; i++) {
            Natures[] row = this.natureMatrix[i];
            for (int j = 0; j < row.length; j++) {
                Natures nature = row[j];
                if (nature == this.nature) {
                    rowIndex = i;
                    columnIndex = j;
                    break;
                }
            }
        }

        return new int[]{ rowIndex, columnIndex };

    }

    /**
     * @return The boosted stat type of the Nature
     */
    public PokemonStatTypes getBoostedStat() {
        return this.indexMap[this.natureMatrixIndices[0]];
    }

    /**
     * @return The boosted stat type of the Nature
     */
    public PokemonStatTypes getDroppedStat() {
        return this.indexMap[this.natureMatrixIndices[1]];
    }

    /**
     * @return The Nature enum type
     */
    public Natures getNature() {
        return this.nature;
    }

    /**
     * Checks tw Nature objects for equality
     * @param otherNature: The other Nature
     * @return             true if equal, false otherwise
     */
    public boolean equals(Nature otherNature) {
        return this.nature == otherNature.getNature();
    }

}
